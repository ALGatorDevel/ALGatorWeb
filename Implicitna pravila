Implicitna pravila

1) ANONYMOUS vs DB mode
- ALGatorServer lahko teče v dveh načinih: ANONYMOUS in DB način. Prvi se uporablja lokalno (kadar ALGatorServer teče v dockerju), drugi se uporablja v produkciji
- ANONYMOUS način vplopim tako, da ustvarim datoteko "anonymous" na ALGATOR_ROOT PREDEN poženem ALGatorServer in ALGatorWeb
- v ANONYMOUS načinu ni prijave v spletno stran, omogočene so vse možnosti dodajanja in urejanja projektov; podatki o entitetah se pišejo samo na disk; 
  uporablja se baza sqllite (datoteka db.sqlite3) vendar samo za potrebe django strežnika, podatki o entitetah pa se v bazo ne shranjujejo
- v DB načinu se uporablja MySQL baza, uporabnik se mora prijaviti na spletno stran, dela pa lahko vse, kar mu dovoljujejo pravice (glej spodaj), 
  podatki o entitetah (lastništvo, pravice, ...) se zapisujejo v bazo



SKUPINE:
 - vsak uporabnik je (implicitno) v skupini EVERYONE
   (posledica: vsi uporabniki imajo vse pravice, ki se nastavijo skupini EVERYONE)

 - neprijavljen uporabnik je (implicitno) v skupini ANONYMOUS
   (posledica: vsi neprijavljeni uporabniki imajo vse pravice, ki se nastavijo skupini ANONYMOUS)

 - root (is_superuser == true) in owner entitete imata nad njo vse pravice
 - privatno entiteto (is_private == true) vidita samo owner in root

------------------------------------------
Avtomatsko dodana pravila in entitete

UPORABNIKI
- uporabnika "root" in "algator" imata is_superuser=true
- uporabnik  "root" ima  is_staff=true (lahko se prijavi v django admin page)
- uporabnik  "anonymous" je neaktiven (is_active=false), v ta profil se ne da prijaviti

ENTITETE
- entitete v sistemu (algoritmi, testne množice, presenterji) so urejene hierarhično; 
- vrh hierarhije je System (e0_S), ta vsebuje entiteto Projects (e0_P), ki je oče vseh problemov; 
  vsak problem (e_X) vsebuje entitete Algorithms (e_X_A), TestSets (e_X_T) in Presenters (e_X_R);
- pravice nad očetom v hierarhiji se podedujejo na otroke (primer: če ima nek uporabnik pravico can_write 
  nad projektom, ima to pravico avtomatsko tudi nad vsemi algoritmi, testnimi množicami in presenterji).
- POSLEDICA: owner projekta ima full control nad vsemi otroki!


AVTOMATSKO DODANA PRAVILA
 
- za vsako dodan projekt se v skupino EVERYONE doda can_read in can_add_project
- za vsako entiteto se v skupino EVERYONE doda can_read


CAN()
- če ALGatorServer teče v ANONYMOUS načinu, can() vedno vrne true
- če ALGatorServer teče v DB načinu, can(uid, eid, right) vrne:
  - če (isEmpty(uid) || nonexisting(uid) || isEmpty(eid)) || nonexisting(right) --> false
  - če (nonexisting(eid))                                                       --> true
  - če je uid superuser ali če je uid owner entitete eid                        --> true
  - če je entiteta privatna                                                     --> false
  - če obstaja pravica v entitypermissionuser(uid, eeid) ali 
    entitypermissiongroup(gid, eeid),kjer je gid skupina, 
    kateri pripada uporabnik in eeid entiteta eid ali kateri 
    od njenih prednikov (parent)                                                --> true
  - sicer                                                                       --> false

opomba: nonexisting(eid) ... entiteta je na disku (v data_root), ni pa v bazi; 
  funkcionalnost je bila dodana za podporo ročnemu (neprodukcijkem) okolju; 
  v produkciji takih entitet (verjetno?) ne bo.