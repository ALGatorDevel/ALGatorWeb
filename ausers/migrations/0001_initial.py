# Generated by Django 3.2 on 2024-07-13 11:10

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone

from ausers.auconsts import USER_ROOT

class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.CharField(max_length=16, unique=True)),
                ('owner', models.CharField(blank=True, default=USER_ROOT, max_length=16)),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 20 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=20, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(error_messages={'unique': 'A user with that email already exists.'},help_text='Required a valid emali address.',max_length=150, unique=True,verbose_name='email address')),
                ('affiliation', models.EmailField(blank=True, max_length=254, verbose_name='Institution and department')),
                ('address', models.EmailField(blank=True, max_length=254, verbose_name='Address')),
                ('country', models.EmailField(blank=True, max_length=254, verbose_name='Country')),
                ('is_superuser', models.BooleanField(default=False, help_text='This user has all ALGator permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='This user has all Django permissions (i.e. can log into admin site).', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Entities',
            fields=[
                ('id', models.CharField(default='', max_length=16, primary_key=True, serialize=False)),
                ('name', models.CharField(default='', max_length=255)),
                ('is_private', models.BooleanField(default=1)),
            ],
        ),
        migrations.CreateModel(
            name='EntityType',
            fields=[
                ('id', models.CharField(default='', max_length=16, primary_key=True, serialize=False)),
                ('name', models.CharField(default='', max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.CharField(default='', max_length=16, primary_key=True, serialize=False)),
                ('name', models.CharField(default='', max_length=255, unique=True)),
                ('description', models.CharField(default='', max_length=255)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL, to_field='uid')),
            ],
        ),
        migrations.CreateModel(
            name='PermissionType',
            fields=[
                ('id', models.CharField(default='', max_length=16, primary_key=True, serialize=False)),
                ('name', models.CharField(default='', max_length=255)),
                ('codename', models.CharField(default='', max_length=255)),
                ('value', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Group_User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='ausers.group')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING,  to=settings.AUTH_USER_MODEL, to_field='uid')),
            ],
        ),
        migrations.CreateModel(
            name='EntityPermissionUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.IntegerField(default=0)),
                ('entity', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='ausers.entities')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL, to_field='uid')),
            ],
        ),
        migrations.CreateModel(
            name='EntityPermissionGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.IntegerField(default=0)),
                ('entity', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='ausers.entities')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='ausers.group')),
            ],
        ),
        migrations.CreateModel(
            name='Entity_permission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entity_type', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='ausers.entitytype')),
                ('permission_type', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='ausers.permissiontype')),
            ],
        ),
        migrations.AddField(
            model_name='entities',
            name='entity_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='ausers.entitytype'),
        ),
        migrations.AddField(
            model_name='entities',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL, to_field='uid'),
        ),
        migrations.AddField(
            model_name='entities',
            name='parent',
            field=models.ForeignKey(blank=True, max_length=16, null=True, on_delete=django.db.models.deletion.CASCADE, to='ausers.entities'),
        ),
        migrations.AddConstraint(
            model_name='entitypermissionuser',
            constraint=models.UniqueConstraint(fields=('entity', 'user'), name='unique_entity_user'),
        ),
        migrations.AddConstraint(
            model_name='entitypermissiongroup',
            constraint=models.UniqueConstraint(fields=('entity', 'group'), name='unique_entity_group'),
        ),
    ]
